#Importar las librerias que vamos a usar 
import pandas as pd 
import numpy as np 
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.svm import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, r2_score
#importamos el dataframe 
data=pd.read_csv("nissan-dataset.csv")
data 
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>id</th>
      <th>full_name</th>
      <th>age</th>
      <th>gender</th>
      <th>model</th>
      <th>color</th>
      <th>performance</th>
      <th>km</th>
      <th>condition</th>
      <th>price</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>Dominic Applin</td>
      <td>42.0</td>
      <td>Male</td>
      <td>Quest</td>
      <td>Mauv</td>
      <td>299.0</td>
      <td>509305.0</td>
      <td>very bad</td>
      <td>40394.91</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>Lenee Eteen</td>
      <td>54.0</td>
      <td>Polygender</td>
      <td>R'nessa</td>
      <td>Orange</td>
      <td>109.0</td>
      <td>965853.0</td>
      <td>old</td>
      <td>8687.90</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>Kendal Esselin</td>
      <td>37.0</td>
      <td>Male</td>
      <td>March / Micra</td>
      <td>Teal</td>
      <td>52.0</td>
      <td>380906.0</td>
      <td>bad</td>
      <td>44705.31</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>Nehemiah Marvelley</td>
      <td>55.0</td>
      <td>Male</td>
      <td>Gloria</td>
      <td>Green</td>
      <td>336.0</td>
      <td>573171.0</td>
      <td>very good</td>
      <td>32889.88</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>Domenic McGeouch</td>
      <td>21.0</td>
      <td>Male</td>
      <td>Avenir</td>
      <td>Khaki</td>
      <td>2.0</td>
      <td>809470.0</td>
      <td>old</td>
      <td>6949.22</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>9995</th>
      <td>9996</td>
      <td>Mike Wilson</td>
      <td>63.0</td>
      <td>Polygender</td>
      <td>Juke</td>
      <td>Yellow</td>
      <td>339.0</td>
      <td>715741.0</td>
      <td>new</td>
      <td>19710.18</td>
    </tr>
    <tr>
      <th>9996</th>
      <td>9997</td>
      <td>Katie Wilson</td>
      <td>45.0</td>
      <td>Female</td>
      <td>Maxima</td>
      <td>Gray</td>
      <td>81.0</td>
      <td>786768.0</td>
      <td>bad</td>
      <td>47797.76</td>
    </tr>
    <tr>
      <th>9997</th>
      <td>9998</td>
      <td>Jane Davis</td>
      <td>27.0</td>
      <td>Female</td>
      <td>Leaf</td>
      <td>Yellow</td>
      <td>130.0</td>
      <td>99170.0</td>
      <td>very bad</td>
      <td>35058.91</td>
    </tr>
    <tr>
      <th>9998</th>
      <td>9999</td>
      <td>Katie Smith</td>
      <td>68.0</td>
      <td>Male</td>
      <td>March / Micra</td>
      <td>Green</td>
      <td>215.0</td>
      <td>640764.0</td>
      <td>old</td>
      <td>21176.71</td>
    </tr>
    <tr>
      <th>9999</th>
      <td>10000</td>
      <td>Katie Smith</td>
      <td>69.0</td>
      <td>Male</td>
      <td>March / Micra</td>
      <td>Green</td>
      <td>215.0</td>
      <td>640764.0</td>
      <td>old</td>
      <td>21177.71</td>
    </tr>
  </tbody>
</table>
<p>10000 rows × 10 columns</p>
</div>
#analizamos y limpiamos los datos 
data.shape
(10000, 10)
data.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 10000 entries, 0 to 9999
Data columns (total 10 columns):
 #   Column       Non-Null Count  Dtype  
---  ------       --------------  -----  
 0   id           10000 non-null  int64  
 1   full_name    9157 non-null   object 
 2   age          9154 non-null   float64
 3   gender       9144 non-null   object 
 4   model        9130 non-null   object 
 5   color        9139 non-null   object 
 6   performance  9143 non-null   float64
 7   km           9141 non-null   float64
 8   condition    9151 non-null   object 
 9   price        9159 non-null   float64
dtypes: float64(4), int64(1), object(5)
memory usage: 781.4+ KB
#miramos los datos faltantes
data.isna().sum()
id               0
full_name      843
age            846
gender         856
model          870
color          861
performance    857
km             859
condition      849
price          841
dtype: int64
#tenemos que rellenar los nulos de algunas columnas 
#visualización de la edad según la frequencia
data['age'].plot(kind='hist', title='Age Column')
<Axes: title={'center': 'Age Column'}, ylabel='Frequency'>
data['age'].fillna(data['age'].mean(), inplace=True)
#visualización de la columna del potencial del coche según la frequencia 
data['performance'].plot(kind='hist', title='Performance Column')
<Axes: title={'center': 'Performance Column'}, ylabel='Frequency'>
data['performance'].fillna(data['performance'].mean(), inplace=True)
#visualización de la columna km totales de conduccion de cada coche según la frequencia
data['km'].plot(kind='hist', title='km Column')
<Axes: title={'center': 'km Column'}, ylabel='Frequency'>
data['km'].fillna(data['km'].mean(), inplace=True)
data.isna().sum()
data.dropna(inplace=True)
#verificamos que el dataset este libre de nulos 
data.isna().sum()
data.shape
(9090, 10)
data.columns
Index(['id', 'full_name', 'age', 'gender', 'model', 'color', 'performance',
       'km', 'condition', 'price'],
      dtype='object')
data.drop(['id', 'full_name'], axis=1, inplace=True)
data.shape
(9090, 8)
#nos centramos solo en unos pocos ejemplos 
data.head()
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>age</th>
      <th>gender</th>
      <th>model</th>
      <th>color</th>
      <th>performance</th>
      <th>km</th>
      <th>condition</th>
      <th>price</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>42.0</td>
      <td>Male</td>
      <td>Quest</td>
      <td>Mauv</td>
      <td>299.0</td>
      <td>509305.0</td>
      <td>very bad</td>
      <td>40394.91</td>
    </tr>
    <tr>
      <th>1</th>
      <td>54.0</td>
      <td>Polygender</td>
      <td>R'nessa</td>
      <td>Orange</td>
      <td>109.0</td>
      <td>965853.0</td>
      <td>old</td>
      <td>8687.90</td>
    </tr>
    <tr>
      <th>2</th>
      <td>37.0</td>
      <td>Male</td>
      <td>March / Micra</td>
      <td>Teal</td>
      <td>52.0</td>
      <td>380906.0</td>
      <td>bad</td>
      <td>44705.31</td>
    </tr>
    <tr>
      <th>3</th>
      <td>55.0</td>
      <td>Male</td>
      <td>Gloria</td>
      <td>Green</td>
      <td>336.0</td>
      <td>573171.0</td>
      <td>very good</td>
      <td>32889.88</td>
    </tr>
    <tr>
      <th>4</th>
      <td>21.0</td>
      <td>Male</td>
      <td>Avenir</td>
      <td>Khaki</td>
      <td>2.0</td>
      <td>809470.0</td>
      <td>old</td>
      <td>6949.22</td>
    </tr>
  </tbody>
</table>
</div>
#sacamos los valores únicos de cada columna 
print("Unique Values in color column: ", data['color'].nunique())
print("Unique Values in gender column: ", data['gender'].nunique())
print("Unique Values in model column: ", data['model'].nunique())
print("Unique Values in condition column: ", data['condition'].nunique())
Unique Values in color column:  23
Unique Values in gender column:  8
Unique Values in model column:  70
Unique Values in condition column:  6
data['gender'].unique()
array(['Male', 'Polygender', 'Genderqueer', 'Female', 'Genderfluid',
       'Agender', 'Bigender', 'Non-binary'], dtype=object)
 #convertimos las columnas categoricas con dummies 
cod_df = pd.get_dummies(data, columns=['color', 'gender', 'model', 'condition'])
cod_df
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>age</th>
      <th>performance</th>
      <th>km</th>
      <th>price</th>
      <th>color_Aquamarine</th>
      <th>color_Black</th>
      <th>color_Blue</th>
      <th>color_Crimson</th>
      <th>color_Fuscia</th>
      <th>color_Goldenrod</th>
      <th>...</th>
      <th>model_Versa</th>
      <th>model_Wingroad</th>
      <th>model_X-Trail</th>
      <th>model_Xterra</th>
      <th>condition_bad</th>
      <th>condition_good</th>
      <th>condition_new</th>
      <th>condition_old</th>
      <th>condition_very bad</th>
      <th>condition_very good</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>42.0</td>
      <td>299.0</td>
      <td>509305.0</td>
      <td>40394.91</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>...</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>True</td>
      <td>False</td>
    </tr>
    <tr>
      <th>1</th>
      <td>54.0</td>
      <td>109.0</td>
      <td>965853.0</td>
      <td>8687.90</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>...</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>True</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>2</th>
      <td>37.0</td>
      <td>52.0</td>
      <td>380906.0</td>
      <td>44705.31</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>...</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>True</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>3</th>
      <td>55.0</td>
      <td>336.0</td>
      <td>573171.0</td>
      <td>32889.88</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>...</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>True</td>
    </tr>
    <tr>
      <th>4</th>
      <td>21.0</td>
      <td>2.0</td>
      <td>809470.0</td>
      <td>6949.22</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>...</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>True</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>9995</th>
      <td>63.0</td>
      <td>339.0</td>
      <td>715741.0</td>
      <td>19710.18</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>...</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>True</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>9996</th>
      <td>45.0</td>
      <td>81.0</td>
      <td>786768.0</td>
      <td>47797.76</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>...</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>True</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>9997</th>
      <td>27.0</td>
      <td>130.0</td>
      <td>99170.0</td>
      <td>35058.91</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>...</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>True</td>
      <td>False</td>
    </tr>
    <tr>
      <th>9998</th>
      <td>68.0</td>
      <td>215.0</td>
      <td>640764.0</td>
      <td>21176.71</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>...</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>True</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>9999</th>
      <td>69.0</td>
      <td>215.0</td>
      <td>640764.0</td>
      <td>21177.71</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>...</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>False</td>
      <td>True</td>
      <td>False</td>
      <td>False</td>
    </tr>
  </tbody>
</table>
<p>9090 rows × 111 columns</p>
</div>
print(cod_df.columns)
Index(['age', 'performance', 'km', 'price', 'color_Aquamarine', 'color_Black',
       'color_Blue', 'color_Crimson', 'color_Fuscia', 'color_Goldenrod',
       ...
       'model_Versa', 'model_Wingroad', 'model_X-Trail', 'model_Xterra',
       'condition_bad', 'condition_good', 'condition_new', 'condition_old',
       'condition_very bad', 'condition_very good'],
      dtype='object', length=111)


